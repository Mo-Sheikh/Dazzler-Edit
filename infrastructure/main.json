{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Environment": {
      "Default": "int",
      "Type": "String",
      "ConstraintDescription": "Values must be int, test or live",
      "Description": "The deployment environment",
      "AllowedValues": ["int", "test", "live"]
    },
    "UpdatePauseTime": {
      "Default": "PT0S",
      "Type": "String",
      "Description": "The time to wait between new instances coming online and the next batch being killed during an ASG update."
    },
    "UpdateMinInService": {
      "Default": "0",
      "Type": "String",
      "Description": "The minimum number of instances in service during an ASG update."
    },
    "Component": {
      "Default": "ws-dazzler-edit",
      "Type": "String",
      "Description": "The name of the Cosmos Component"
    },
    "ImageId": {
      "Default": "ami-9398d3e0",
      "Type": "String",
      "Description": "The AMI to use for this component"
    },
    "MinSize": {
      "Default": "1",
      "Type": "String",
      "Description": "The minimum number of instances"
    },
    "MaxSize": {
      "Default": "1",
      "Type": "String",
      "Description": "The maximum number of instances"
    },
    "KeyName": {
      "Default": "cosmos",
      "Type": "String",
      "Description": "Name of existing EC2 keypair to enable SSH access to the created instances"
    },
    "CoreInfrastructureStackName": {
      "Default": "core-infrastructure",
      "Type": "String",
      "Description": "Name of the AWS account's core-infrastructure stack. Used to import other network parameters (vpc id, subnets etc)"
    },
    "UpdateMaxBatchSize": {
      "Default": "1",
      "Type": "String",
      "Description": "The maximum number of instances to be killed at one time during an ASG update."
    },
    "InstanceType": {
      "Default": "t2.micro",
      "Type": "String",
      "Description": "The size of the instances"
    },
    "S3BucketArn": {
      "Default": "arn:aws:s3:::dazzleredit",
      "Type": "String",
      "Description": "The location of the default private storage bucket for all applications."
    }
  },
  "Description": "A BBC Component template for Dazzler Edit. Includes autoscaled instances",
  "Resources": {
    "ComponentScalingPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "ScalingAdjustment": 1,
        "AutoScalingGroupName": {
          "Ref": "ComponentAutoScalingGroup"
        },
        "AdjustmentType": "ChangeInCapacity"
      }
    },
    "ComponentAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": ["eu-west-1a", "eu-west-1b", "eu-west-1c"],
        "Tags": [
          {
            "PropagateAtLaunch": true,
            "Value": {
              "Ref": "Environment"
            },
            "Key": "BBCEnvironment"
          },
          {
            "PropagateAtLaunch": true,
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "Component"
                  }
                ]
              ]
            },
            "Key": "Name"
          },
          {
            "PropagateAtLaunch": true,
            "Value": "ws-dazzler-edit",
            "Key": "BBCComponent"
          },
          {
            "Value": "ws-dazzler",
            "PropagateAtLaunch": true,
            "Key": "BBCProject"
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "ComponentElasticLoadBalancer"
          }
        ],
        "MinSize": {
          "Ref": "MinSize"
        },
        "MaxSize": {
          "Ref": "MaxSize"
        },
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${CoreInfrastructureStackName}-PrivateSubnet0"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${CoreInfrastructureStackName}-PrivateSubnet1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${CoreInfrastructureStackName}-PrivateSubnet2"
            }
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "ComponentLaunchConfiguration"
        },
        "HealthCheckGracePeriod": 300,
        "HealthCheckType": "ELB"
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": {
            "Ref": "UpdatePauseTime"
          },
          "MaxBatchSize": {
            "Ref": "UpdateMaxBatchSize"
          },
          "MinInstancesInService": {
            "Ref": "UpdateMinInService"
          }
        }
      }
    },
    "captureTaskQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "FifoQueue": true,
        "QueueName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "Environment"
              },
              "dazzler-capture-tasks.fifo"
            ]
          ]
        },
        "ContentBasedDeduplication": true,
        "Tags": [
          {
            "Value": "captureTasks",
            "Key": "Purpose"
          }
        ]
      }
    },
    "ComponentElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "HealthCheck": {
          "HealthyThreshold": "3",
          "Interval": "15",
          "Target": "HTTP:7080/status/",
          "Timeout": "10",
          "UnhealthyThreshold": "3"
        },
        "Listeners": [
          {
            "InstancePort": "7443",
            "LoadBalancerPort": "443",
            "Protocol": "tcp",
            "InstanceProtocol": "tcp"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${CoreInfrastructureStackName}-PublicSubnet0"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${CoreInfrastructureStackName}-PublicSubnet1"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${CoreInfrastructureStackName}-PublicSubnet2"
            }
          }
        ]
      }
    },
    "ComponentLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${CoreInfrastructureStackName}-SSHFromBastionsSecGroup"
            }
          },
          {
            "Ref": "ComponentSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "ComponentInstanceProfile"
        },
        "ImageId": {
          "Ref": "ImageId"
        }
      }
    },
    "ComponentInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ComponentRole"
          }
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "ToPort": "443",
            "FromPort": "443",
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp"
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${CoreInfrastructureStackName}-VpcId"
          }
        },
        "GroupDescription": "An ELB group allowing access only to from the corresponding component"
      }
    },
    "captureTaskQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Fn::GetAtt": ["captureTaskQueue", "QueueName"]
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sqs:sendMessage",
              "Resource": {
                "Fn::GetAtt": ["captureTaskQueue", "Arn"]
              },
              "Effect": "Allow",
              "Principal": "*"
            }
          ]
        }
      }
    },
    "ComponentDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::FindInMap": [
            "OperationsMap",
            "DomainNameBaseMap",
            {
              "Ref": "Environment"
            }
          ]
        },
        "TTL": "60",
        "Type": "CNAME",
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Fn::FindInMap": [
                  "OperationsMap",
                  "CnameEntryMap",
                  {
                    "Ref": "Environment"
                  }
                ]
              },
              {
                "Fn::FindInMap": [
                  "OperationsMap",
                  "DomainNameBaseMap",
                  {
                    "Ref": "Environment"
                  }
                ]
              }
            ]
          ]
        },
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["ComponentElasticLoadBalancer", "DNSName"]
          }
        ]
      }
    },
    "ComponentPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ComponentPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Resource": ["*"],
              "Effect": "Allow"
            },
            {
              "Action": ["cloudwatch:PutMetricData"],
              "Resource": ["*"],
              "Effect": "Allow"
            },
            {
              "Action": [
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:ReceiveMessage"
              ],
              "Resource": {
                "Fn::GetAtt": ["captureTaskQueue", "Arn"]
              },
              "Effect": "Allow"
            },
            {
              "Action": [
                "sqs:DeleteMessage",
                "sqs:SendMessage",
                "sqs:ReceiveMessage"
              ],
              "Resource": {
                "Fn::FindInMap": [
                  "OperationsMap",
                  "CopyMediaQueueMap",
                  {
                    "Ref": "Environment"
                  }
                ]
              },
              "Effect": "Allow"
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:GetObjectVersion",
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:DeleteObject",
                "s3:DeleteObjectTagging",
                "s3:DeleteObjectVersionTagging",
                "s3:GetObjectTagging",
                "s3:GetObjectVersionTagging",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging"
              ],
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:aws:s3:::${bucketName}/*",
                    {
                      "bucketName": {
                        "Fn::FindInMap": [
                          "OperationsMap",
                          "PlayoutBucketMap",
                          {
                            "Ref": "Environment"
                          }
                        ]
                      }
                    }
                  ]
                }
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:GetLifecycleConfiguration"
              ],
              "Resource": [
                {
                  "Fn::Sub": [
                    "arn:aws:s3:::${bucketName}",
                    {
                      "bucketName": {
                        "Fn::FindInMap": [
                          "OperationsMap",
                          "PlayoutBucketMap",
                          {
                            "Ref": "Environment"
                          }
                        ]
                      }
                    }
                  ]
                }
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "s3:GetBucketLocation",
                "s3:GetBucketNotification",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:ListMultipartUploadParts"
              ],
              "Resource": [
                {
                  "Ref": "S3BucketArn"
                }
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "s3:GetObject",
                "s3:GetBucketLocation",
                "s3:AbortMultipartUpload",
                "s3:PutBucketNotification",
                "s3:PutObject",
                "s3:DeleteObject"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "S3BucketArn"
                      },
                      "/",
                      {
                        "Ref": "Component"
                      },
                      "/",
                      {
                        "Ref": "Environment"
                      },
                      "/logs/*"
                    ]
                  ]
                }
              ],
              "Effect": "Allow"
            },
            {
              "Action": ["cloudformation:Describe*"],
              "Resource": ["*"],
              "Effect": "Allow"
            },
            {
              "Action": ["ec2:Describe*"],
              "Resource": ["*"],
              "Effect": "Allow"
            },
            {
              "Action": ["tag:GetResources"],
              "Resource": ["*"],
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ComponentRole"
          }
        ]
      }
    },
    "ComponentSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "FromPort": "7080",
            "ToPort": "7080",
            "IpProtocol": "tcp"
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "FromPort": "7443",
            "ToPort": "7443",
            "IpProtocol": "tcp"
          },
          {
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "FromPort": "123",
            "ToPort": "123",
            "IpProtocol": "udp"
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${CoreInfrastructureStackName}-VpcId"
          }
        },
        "GroupDescription": "A component security group allowing access only from the corresponding ELB"
      }
    },
    "ComponentRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              }
            }
          ]
        }
      }
    }
  },
  "Mappings": {
    "OperationsMap": {
      "CnameEntryMap": {
        "int": "dazzler.int",
        "test": "dazzler.int",
        "live": "dazzler"
      },
      "PlayoutBucketMap": {
        "int": "ws-dazzler-assets-test",
        "live": "ws-dazzler-assets"
      },
      "VpcCidrIpMap": {
        "int": "10.98.0.0/18",
        "live": "10.124.64.0/18"
      },
      "CopyMediaQueueMap": {
        "int": "arn:aws:sqs:eu-west-1:576677253489:Media-Syndication-Queue",
        "live": "arn:aws:sqs:eu-west-1:205979497597:Media-Syndication-Queue"
      },
      "ElasticSearchMap": {
        "int": "vpc-test-pws-es-01-ntq5eu3xhbkw56fc2yi4vt2ndm.eu-west-1.es.amazonaws.com",
        "live": "vpc-live-pws-es-01-sharq3wijppafqfq2v3isa5ram.eu-west-1.es.amazonaws.com"
      },
      "DomainNameBaseMap": {
        "int": "1c9eb4db7739eb1a.xhst.bbci.co.uk.",

        "live": "7a576ea3ed7ca599.xhst.bbci.co.uk."
      }
    }
  }
}
